plugins {
    id 'java'
}

group 'org.janelia.scicomp'
version '4.5.5'

sourceCompatibility = '8'
targetCompatibility = '8'

repositories {
    mavenCentral()
}

ext {
    jaxbVersion = '2.3.0'
    moduleName = 'org.janelia.tmog'
}

dependencies {
    compile "com.sun.activation:javax.activation:1.2.0"
    compile "javax.xml.bind:jaxb-api:" + jaxbVersion
    compile "com.sun.xml.bind:jaxb-core:" + jaxbVersion
    runtime "com.sun.xml.bind:jaxb-impl:" + jaxbVersion

    compile "commons-digester:commons-digester:1.8"
    compile "commons-httpclient:commons-httpclient:3.1"
    compile "com.google.code.gson:gson:2.7"
    compile "com.jayway.jsonpath:json-path:2.7.0"
    compile 'com.intellij:forms_rt:7.0.3'
    compile "org.apache.logging.log4j:log4j-api:2.20.0"
    compile "org.apache.logging.log4j:log4j-core:2.20.0"
    compile "mysql:mysql-connector-java:5.1.22"
    compile "net.java.dev.glazedlists:glazedlists_java15:1.8.0"
    compile "org.jdesktop:swing-worker:1.1"

    testImplementation group: 'junit', name: 'junit', version: '4.12'
}

// stolen from https://stackoverflow.com/questions/3963708/gradle-how-to-display-test-results-in-the-console-in-real-time
tasks.withType(Test) {
    testLogging {
        events "failed" // "passed", "skipped"
        showStandardStreams true
        showExceptions true
        showCauses true
        showStackTraces true

        // set options for log level DEBUG and INFO
        info.events = debug.events
        info.exceptionFormat = debug.exceptionFormat

        afterSuite { desc, result ->
            if (!desc.parent) { // will match the outermost suite
                def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
                def startItem = '|  ', endItem = '  |'
                def repeatLength = startItem.length() + output.length() + endItem.length()
                println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
            }
        }
    }
}

Map<String, ?> manifestAttributes = [
        'Application-Name': 'Janelia Transmogrifier',
        'Automatic-Module-Name': moduleName,
        'Implementation-Title': 'org.janelia.it.ims.tmog',
        'Implementation-Version': version,
        'Main-Class': 'org.janelia.it.ims.tmog.JaneliaTransmogrifier'
]

task devJar(type: Jar)  {
    
    classifier='dev'

    manifest {
        attributes(manifestAttributes)
    }
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar

    doLast {
        println 'created ' + archivePath
    }
}

task prodJar(type: Jar) {

    def dbSageKeys = ["db.sage.username", "db.sage.url", "db.sage.password"]
    def dbSagePropsFile = file(System.getProperty("user.home") + '/ssl/code-cert/2018/sage.properties')
    Properties prodSageProps

    doFirst {
        prodSageProps = loadProperties(dbSageKeys, dbSagePropsFile)
    }

    // remove lab specific config files from deployed jar
    exclude('**/transmogrifier_config_*.xml')

    // overwrite dev environment configuration with production values
    filesMatching('**/sage.properties') {
        filter {
            replacePropertiesInLine(dbSageKeys, prodSageProps, it)
        }
    }

    filesMatching('**/log4j2.xml') {
        filter {
            it.replace('<!-- <AppenderRef ref="SYSLOG"/> -->', '<AppenderRef ref="SYSLOG"/>')
        }
    }

    classifier='prod'
    destinationDir = file(destinationDir.absolutePath + "_prod")

    manifest {
        attributes(manifestAttributes)
    }
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar

    doLast {
        println 'created ' + archivePath
    }
}

// include prodJar task as part of assemble lifecycle task
assemble.dependsOn(prodJar)

task logUsefulBuildInfo {
    doLast {
        println "\nbuilt the following jar files:"
        file(project.libsDir).eachFileMatch(~/.*.jar/) { file ->
            println file.getAbsolutePath()
        }
    }
}

build.dependsOn(logUsefulBuildInfo)

// adds task 'antBuildConfig' from build_config.xml
ant.importBuild('build_config.xml')

task deployConfig(type: Exec, dependsOn: antBuildConfig) {
    environment 'PATH', "/usr/local/opt/coreutils/libexec/gnubin:${environment.PATH}"
    commandLine 'src/module_build/scripts/04_deploy_config.sh'
}

static Properties loadProperties(List<String> keys,
                                 File propsFile) {
    def props = new Properties()
    propsFile.withInputStream { props.load(it) }
    keys.each {
        if (! props.containsKey(it)) {
            def message = "required key '" + it + "' is missing in " + propsFile.getAbsolutePath()
            throw new GradleException(message)
        }
    }
    println "loaded properties from " + propsFile.getAbsolutePath()
    return props
}

static String replacePropertiesInLine(List<String> keys,
                                      Properties props,
                                      String line) {
    def replacedLine = line
    keys.each {
        if (line.startsWith(it)) {
            replacedLine = it + "=" + props.getProperty(it)
            // println "replaced '" + it + "' value"
        }
    }
    return replacedLine
}